$app = appParameter: "kalzit-file".
$appFolder = fileParent: app.
$rootFolder = appParameter: "kalzit-root-folder".
$platform ? (default: "html5") = appParameter: "platform".

print: "Trying to build Kalzit app " + app.

`parse JSON configuration`
$configPath = (".k";".json") strReplace app.
$configObject = parseJson: !if (fileIsFile: configPath) { fileContent: configPath }.

`define options and default values for them`
$excludedLibraries = $excludedLibraries `TODO: Make other valid name forms work` objFirstProperty configObject.
$appcacheManifest = $appcacheManifest propOf configObject.
$appleTouchIcon = $appleTouchIcon propOf configObject.

$hasCustomLibrary = fileIsFile: (fileParent: app) + "/doNotTouch/_min.js".

$skeletonCode = !ifElse ((not: hasCustomLibrary) & void eq excludedLibraries) {
		fileContent: rootFolder + "/generated/_browser_app_singlefile.html"
	};{
		$usedLibraries = 
			(rootFolder + "/" + {not: x listContains excludedLibraries} filter parseJson: fileContent: rootFolder + "/" + platform + "/usable-libraries.json");
			!if (hasCustomLibrary) {
				(fileParent: app) + "/doNotTouch"
			}.
			
		$scriptTags = "<script>" + (";" strJoin {
			print: "Adding not-excluded library " + x.
			"GLang.packageManager.installJs(function(){" + (fileContent: x + "/_min.js") + "})"
		} each usedLibraries) + ";</script>".
		
		$withoutAppcache = ("$scriptTags$";scriptTags) strReplace fileContent: rootFolder + "/generated/_browser_app_skeleton.html".
		
		$withoutAppleIcon = !ifElse (void eq appcacheManifest) {
			withoutAppcache	
		};{
			("<html>"  ;  '<html manifest="' + appcacheManifest + '">')
				strReplace withoutAppcache
		}.
		!ifElse (void eq appleTouchIcon) {
			withoutAppleIcon
		};{
			("<head>" ; '<head><link rel="apple-touch-icon" href="' + appleTouchIcon + '" /><meta name="apple-mobile-web-app-capable" content="yes">')
				strReplace withoutAppleIcon
		}
	}.

$translationMapFile = appFolder + "/doNotTouch/translationMap.json".
$prefix = !ifElse (fileIsFile: translationMapFile) {
	"GLang.packageManager.installJs(function(){this.stringAssetMap=" + (fileContent: translationMapFile) + "})"
};{
	""
}.

(rootFolder + "/generated/appBuildingTempFile.js") fileWrite prefix + ';GLang.evaluateTree(' + ((fileContent: app) calcitCompile true `optimized`) + ', GLang.defaultRuntimeEnvironment);'.


`Now we can generate the final HTML file`
`Replace the last .k in the file name (file extension) by .html to get the path of the generated HTML file`
$generatedHtmlPath = ("(.+)\.k" ; "$1.html") strReplaceRegex app.

`Write the file content`
generatedHtmlPath fileWrite
	`We replace $app$ from the app skeleton by a minified version of the app code (available in /generated/appBuildingTempFile.js)`
	("$app$";(runCommand: 'terser "' + (rootFolder + "/generated/appBuildingTempFile.js") + '"')) strReplace skeletonCode.