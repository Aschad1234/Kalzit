`A simple text note app`

`(reference: $singleViewPickerHover) = ($view) fun {(250;200;200;255) flagBackgroundColor view.}.
(reference: $singleViewPickerSelect) = ($view) fun {(250;100;100;255) flagBackgroundColor view.}.`

`Blue theme light`
`(reference: $uiSkinSingleViewPickerHover) = ($view) fun {(200;200;250;255) flagBackgroundColor view. (100;100;100;255) flagForegroundColor view}.
(reference: $uiSkinSingleViewPickerSelect) = ($view) fun {(100;100;200;255) flagBackgroundColor view. (200;200;200;255) flagForegroundColor view}.
(reference: $uiSkinSingleViewPickerDeselect) = ($view) fun {white flagBackgroundColor view. black flagForegroundColor view}.`

`Blue theme dark`
$darkBlueAccentColorRgb ? RgbColor = 1;1;20.
$darkGreenAccentColorRgb ? RgbColor = 1;20;1.
$darkRedAccentColorRgb ? RgbColor = 30;1;1.

$baseAccentColorRgb ? RgbColor = darkBlueAccentColorRgb.
$lightAccentColor ? Color = baseAccentColorRgb + 190.
$twilightAccentColor ? Color = baseAccentColorRgb + 90.
$darkerTwilightAccentColor ? Color = baseAccentColorRgb + 60.
$lighterTwilightAccentColor ? Color = baseAccentColorRgb + 120.
$whiteAccentColor ? Color = baseAccentColorRgb + 220.
$blackAccentColor ? Color = baseAccentColorRgb.

uiAppContainerBackgroundColor: blackAccentColor.
(reference: $uiSkinSingleViewPickerHover) = ($view) fun {([lightAccentColor];[lighterTwilightAccentColor]) flagBackgroundGradientLeftToRight view. darkerTwilightAccentColor flagForegroundColor view}.
(reference: $uiSkinSingleViewPickerSelect) = ($view) fun {([twilightAccentColor];[darkerTwilightAccentColor]) flagBackgroundGradientLeftToRight view. whiteAccentColor flagForegroundColor view}.
(reference: $uiSkinSingleViewPickerDeselect) = ($view) fun {"Arial, Helvetica" flagFontFamily view. blackAccentColor flagBackgroundColor view. whiteAccentColor flagForegroundColor view}.
(reference: $uiSkinTextarea) = ($view) fun {1 flagEmFontSize view. whiteAccentColor flagForegroundColor view .darkerTwilightAccentColor flagBackgroundColor view. "Arial, Helvetica" flagFontFamily view}.






$noteContentFunction = ($currentNoteIndex) ? Int fun {
	{(default: "New note"): storageLoadString: $note + currentNoteIndex}
}.

$noteCount ? Int = (default: 0): storageLoadString: $noteCount. $noteCountRef = reference: $noteCount.
$noteFunctions ? ModifiableList = noteContentFunction each (0 rangeUp noteCount) - 1.

$noteView ? UiContainer = void. $noteViewRef = reference: $noteView.
$addNoteView ? UiContainer = "+ Add note".

$noteSelectionViews ? ModifiableList = {uiContainer: first: strNewline strSplit do:x} each getArray of noteFunctions.
($addToEnd of noteSelectionViews): addNoteView.

$noteSelectionView = (($view ; $index ? Int) fun {
		!if (view eq addNoteView) {
			`Add note here`
			$currentNoteIndex = length of getArray of noteFunctions.
			($push of noteFunctions): noteContentFunction:currentNoteIndex
		}. else {
			`Show note here`
			noteViewRef = @(percentWidth 100) @(percentHeight 100) {
				($note + index) storageSaveString x
			} uiTextareaOnchange do:index at getArray of noteFunctions.
		}
	}) uiLiveSingleViewPicker noteSelectionViews.
	

($setOnAddition of noteFunctions): {
	$noteCount storageSaveString String: length of getArray of noteFunctions.
	($push of noteSelectionViews): uiContainer: do: last of getArray of noteFunctions.
}.

print: noteSelectionView uiSplitView (uiShowVariable: noteViewRef).
